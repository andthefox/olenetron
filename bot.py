# bot.py
# -*- coding: utf-8 -*-

import os
import io
import sys
import random
import asyncio
import discord
import wget
import youtube_dl
import requests
import boto3
from PIL import Image
import json
import html
import feedparser

from dotenv import load_dotenv
from discord.ext import commands
from delorean import Delorean
from delorean import epoch
from datetime import timedelta

load_dotenv()
TOKEN = os.environ.get('DISCORD_TOKEN')
STATUS = 'ü¶å | !–∫–∞–∫'

s3 = boto3.resource('s3')
bucket = s3.Bucket(os.environ.get('S3_BUCKET_NAME'))
jsondata = {}

for key in bucket.objects.all():
    print(key)

json_object = bucket.Object('data.json')


def prepare_json_data():
    global json_object
    json_object.download_file('data.json')
    global jsondata
    with open('data.json') as json_file:
        jsondata = json.load(json_file)
    print(json.dumps(jsondata, indent=4))


def modify_json_data():
    global jsondata
    # print(json.dumps(jsondata, indent=4))
    with open('data.json', 'w') as output:
        json.dump(jsondata, output)


def upload_json_data():
    global json_object
    json_object.upload_file('data.json')


def synthesize(text, ssml=False, apikey=os.environ.get('YANDEX_API_KEY'), emotion='good', voice='omazh'):
    url = 'https://tts.api.cloud.yandex.net/speech/v1/tts:synthesize'
    headers = {
        'Authorization': 'Api-Key ' + apikey,
    }

    data = {
        'lang': 'ru-RU',
        'emotion': emotion,
        'voice': voice
    }
    if ssml is True:
        data['ssml'] = text
    else:
        data['text'] = text

    with requests.post(url, headers=headers, data=data, stream=True) as resp:
        if resp.status_code != 200:
            raise RuntimeError("Invalid response received: code: %d, message: %s" % (resp.status_code, resp.text))

        for chunk in resp.iter_content(chunk_size=None):
            yield chunk


prepare_json_data()

# putting objects
'''
data = open('693845376024707123.mp3', 'rb')
bucket.put_object(Key='693845376024707123.mp3', Body=data)
'''

# loading images
'''
my_object = bucket.Object('693845376024707123.jpg')
stream = io.BytesIO(my_object.get()['Body'].read())
img = Image.open(stream)
img.show()
'''

# Suppress noise about console usage from errors
youtube_dl.utils.bug_reports_message = lambda: ''

ytdl_format_options = {
    'format': 'bestaudio/best',
    'outtmpl': '%(extractor)s-%(id)s-%(title)s.%(ext)s',
    'restrictfilenames': True,
    'noplaylist': True,
    'nocheckcertificate': True,
    'ignoreerrors': False,
    'logtostderr': False,
    'quiet': True,
    'no_warnings': True,
    'default_search': 'auto',
    'source_address': '0.0.0.0'  # bind to ipv4 since ipv6 addresses cause issues sometimes
}

ffmpeg_options = {
    'options': '-vn'
}

ytdl = youtube_dl.YoutubeDL(ytdl_format_options)


class YTDLSource(discord.PCMVolumeTransformer):
    def __init__(self, source, *, data, volume=0.5):
        super().__init__(source, volume)

        self.data = data

        self.title = data.get('title')
        self.url = data.get('url')

    @classmethod
    async def from_url(cls, url, *, loop=None, stream=False):
        loop = loop or asyncio.get_event_loop()
        data = await loop.run_in_executor(None, lambda: ytdl.extract_info(url, download=not stream))

        if 'entries' in data:
            # take first item from a playlist
            data = data['entries'][0]

        filename = data['url'] if stream else ytdl.prepare_filename(data)
        return cls(discord.FFmpegPCMAudio(filename, **ffmpeg_options), data=data)

    @classmethod
    async def get_title(cls, url, *, loop=None):
        loop = loop or asyncio.get_event_loop()
        data = await loop.run_in_executor(None, lambda: ytdl.extract_info(url, download=False))

        if 'entries' in data:
            # take first item from a playlist
            data = data['entries'][0]
        return data.get('title')


bot = commands.Bot(command_prefix='!')
bot.remove_command('help')

time_var = {}
timer_run = {}
voice = {}


async def custom_help(ctx, command=''):
    embed = discord.Embed(
        colour=discord.Colour.green()
    )

    coms = {
        '–∫–∞–∫/–æ–ª–µ–Ω—å': [' ü¶å –í—ã–≤–æ–¥–∏—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –∏–ª–∏ –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–∞–Ω–¥–µ', '–í—ã–≤–æ–¥–∏—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ \
–∫–æ–º–∞–Ω–¥—ã –∏–ª–∏ –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–∞–Ω–¥–µ'],
        '–∫–∏–Ω—å': [' üé≤ –ö–∏–¥–∞–µ—Ç –∫—É–±–∏–∫–∏', '–ö–∏–Ω—É—Ç—å –∫—É–±–∏–∫–∏ *x* —Å—Ç–æ—Ä–æ–Ω *y* —Ä–∞–∑'],
        '–ø–µ—Ä–µ–≤–µ–¥–∏': [' üîÑ –ü–µ—Ä–µ–≤–æ–¥ —Ä–∞—Å–∫–ª–∞–¥–∫–∏ —Ç–µ–∫—Å—Ç–∞', '–ü–µ—Ä–µ–≤–æ–¥–∏—Ç —Ç–µ–∫—Å—Ç –≤ –Ω—É–∂–Ω—É—é —Ä–∞—Å–∫–ª–∞–¥–∫—É'],
        '—Å—Ç–∞—Ä—Ç': [' ‚è≤ –ó–∞–ø—É—Å–∫–∞–µ—Ç —Å–µ–∫—É–Ω–¥–æ–º–µ—Ä', '–ó–∞–ø—É—Å–∫–∞–µ—Ç —Å–µ–∫—É–Ω–¥–æ–º–µ—Ä'],
        '—Å—Ç–æ–ø': [' ‚è≤ –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–µ–∫—É–Ω–¥–æ–º–µ—Ä –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç', '–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–µ–∫—É–Ω–¥–æ–º–µ—Ä \
–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç'],
        '—Ç–∞–π–º–µ—Ä': [' ‚è≥ –ó–∞–ø—É—Å–∫–∞–µ—Ç —Ç–∞–π–º–µ—Ä', '—Ç–∞–π–º–µ—Ä `—Å—Ç–∞—Ä—Ç <—á–∏—Å–ª–æ> <—Å–µ–∫|–º–∏–Ω|—á–∞—Å>`, `—Å—Ç–æ–ø`'],
        '–ø–∏–Ω–≥': [' üèì –ó–∞–¥–µ—Ä–∂–∫–∞ –±–æ—Ç–∞', '–í—Ä–µ–º—è –∑–∞–¥–µ—Ä–∂–∫–∏ –æ—Ç–≤–µ—Ç–∞ –±–æ—Ç–∞ –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö'],
        '–≥–æ–ª–æ—Å': [' üîä –î–æ–±–∞–≤–ª—è–µ—Ç –±–æ—Ç–∞ –≤ –í–∞—à –≥–æ–ª–æ—Å–æ–≤–æ–π –∫–∞–Ω–∞–ª', '–î–æ–±–∞–≤–ª—è–µ—Ç –±–æ—Ç–∞ –≤ –í–∞—à –≥–æ–ª–æ—Å–æ–≤–æ–π –∫–∞–Ω–∞–ª'],
        '—Ü—ã—Ü': [' üîà –ë–æ—Ç –ø–æ–∫–∏–¥–∞–µ—Ç –≥–æ–ª–æ—Å–æ–≤–æ–π –∫–∞–Ω–∞–ª', '–ë–æ—Ç –ø–æ–∫–∏–¥–∞–µ—Ç –≥–æ–ª–æ—Å–æ–≤–æ–π –∫–∞–Ω–∞–ª'],
        '–ø–ª–µ–µ—Ä': [' ‚ñ∂ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∞—É–¥–∏–æ. –ü–æ–¥—Ä–æ–±–Ω–æ: `!–∫–∞–∫ –ø–ª–µ–µ—Ä`', '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: !–ø–ª–µ–µ—Ä \n\
`—é—Ç—É–±|—Å—Ç—Ä–∏–º [—Å—Å—ã–ª–∫–∞/"–ø–æ–∏—Å–∫"]`, `—Ñ–∞–π–ª [*.mp3/*.mp4]`,  `—Å—Ç–æ–ø`, `–ø–∞—É–∑–∞`, `–ø—Ä–æ–¥`, `–≥—Ä–æ–º–∫–æ—Å—Ç—å [–ø—Ä–æ—Ü–µ–Ω—Ç]`'],
        '—Ç–µ–∫—Å—Ç': [' üí¨ –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Ç–µ—Å—Ç–∞ –∏–∑ —Å–ª–æ–≤–∞, —Ñ—Ä–∞–∑—ã –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –Ω–∞ –±–∞–∑–µ https://porfirevich.ru/', '!\
—Ç–µ–∫—Å—Ç [—Å–ª–æ–≤–∞] <—á–∏—Å–ª–æ —Å–ª–æ–≤ –Ω–∞ –≤—ã—Ö–æ–¥–µ>'],
        '–¥—Ä–∏–º': [' üñº –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é deepdream', '\
–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ –∫ —Å–æ–æ–±—â–µ–Ω–∏—é —Å –∫–æ–º–∞–Ω–¥–æ–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–ª–∏ —Å—Å—ã–ª–∫—É']
    }

    if command == '':
        embed.set_author(name='–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ üõ†')
        for k in coms:
            value = coms[k]
            embed.add_field(name='!'+k, value=value[0], inline=False)
        embed.add_field(name='---', value='–ö—Å—Ç–∞—Ç–∏, –±–æ—Ç—É –º–æ–∂–Ω–æ –ø–∏—Å–∞—Ç—å –∏ –Ω–∞–ø—Ä—è–º—É—é üòé', inline=False)
    else:
        embed.set_author(name='–ü–æ–∏—Å–∫ –ø–æ –∫–æ–º–∞–Ω–¥–µ üîé')
        if command in coms:
            embed.add_field(name='!' + command, value=coms[command][1], inline=False)
        else:
            embed.add_field(name='!' + command, value='–ù–µ—Ç —Ç–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã ü§∑‚Äç‚ôÇÔ∏è', inline=False)

    await ctx.send('', embed=embed)


async def timer_routine(ctx, v, message, idd):
    await bot.wait_until_ready()
    while not bot.is_closed() and not timer_run[idd] is False:
        dt = Delorean()
        now = dt.epoch
        delta = v-now
        if delta <= 0:
            break
        time_left = timedelta(seconds=delta)
        await message.edit(content='–û—Å—Ç–∞–ª–æ—Å—å ' + str(time_left))
        await asyncio.sleep(1)

    timer_run.pop(idd)
    await message.delete()
    await ctx.send('<@'+str(ctx.author.id)+'>' + ', —Ç–∞–π–º–µ—Ä –∑–∞–≤–µ—Ä—à–∏–ª –æ—Ç—Å—á–µ—Ç!')

'''
async def player_routine(ctx, guild):
    await bot.wait_until_ready()
    
    while not bot.is_closed() and player_queue[guild]:
        await asyncio.sleep(1)

'''


@bot.event
async def on_ready():
    await bot.change_presence(activity=discord.Game(name=STATUS))
    print(bot.user.name + ' is ready.')


@bot.command(name='–∫–∞–∫')
async def run_help(ctx, command=''):
    await custom_help(ctx, command)


@bot.command(name='–ø–µ—Ä–µ–≤–µ–¥–∏')
async def run_translate(ctx, *, sub_):
    symbols_en = "qwertyuiop[]asdfghjkl;'zxcvbnm,./`" \
                 'QWERTYUIOP{}ASDFGHJKL:"ZXCVBNM<>?~&'

    symbols_ru = "–π—Ü—É–∫–µ–Ω–≥—à—â–∑—Ö—ä—Ñ—ã–≤–∞–ø—Ä–æ–ª–¥–∂—ç—è—á—Å–º–∏—Ç—å–±—é.—ë" \
                 '–ô–¶–£–ö–ï–ù–ì–®–©–ó–•–™–§–´–í–ê–ü–†–û–õ–î–ñ–≠–Ø–ß–°–ú–ò–¢–¨–ë–Æ,–Å?'
    en = 0
    ru = 0

    if sub_:
        for k in range(len(sub_)):
            if sub_[k] in symbols_en:
                en += 1
            if sub_[k] in symbols_ru:
                ru += 1

        if en > ru:
            layout = dict(zip(map(ord, symbols_en), symbols_ru))
        else:
            layout = dict(zip(map(ord, symbols_ru), symbols_en))

        await ctx.send('<@' + str(ctx.message.author.id) + '>' + ', –ø–µ—Ä–µ–≤–æ–∂—É: \n```' + sub_ + ' \
-> ' + sub_.translate(layout) + '```')
    else:
        await ctx.send('–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–≤–æ–¥–∏—Ç —Ç–µ–∫—Å—Ç –≤ —Ä—É—Å—Å–∫—É—é —Ä–∞—Å–∫–ª–∞–¥–∫—É. –¢–µ–∫—Å—Ç –≤–≤–æ–¥–∏—Ç—Å—è –≤ –∫–∞–≤—ã—á–∫–∞—Ö')


@bot.command(name='–∫–∏–Ω—å')
async def roll(ctx, number_of_sides: int = 20, number_of_dice: int = 1):
    if 1 < number_of_sides <= 100 and 0 < number_of_dice <= 50:
        dice = [
            '**' + str(random.choice(range(1, number_of_sides + 1))) + '**'
            for _ in range(number_of_dice)
        ]
        name = ctx.message.author.name
        await ctx.send(name + ' –∫–∏–¥–∞–µ—Ç –∫—É–±–∏–∫–∏ ({0}x{1}) üé≤üé≤ \n–í—ã–ø–∞–ª–æ:\
         \n'.format(number_of_dice, number_of_sides) + ', '.join(dice))
    else:
        await ctx.send('–ù–µ –∫–∏–Ω—É üòï')


@bot.command(name='—Å—Ç–∞—Ä—Ç')
async def start_counter(ctx):
    dt = Delorean()
    name = ctx.author.name
    if ctx.guild:
        guild = str(ctx.guild.id)
    else:
        guild = 'noguild'

    ident = str(name+'@'+guild)

    out = [', –ø–æ–µ—Ö–∞–ª–∏! üí®', ', —á–∞—Å–∏–∫–∏ —É–∂–µ —Ç–∏–∫–∞—é—Ç! ‚è≤']

    if ident in time_var:
        response = name + out[1]
    else:
        time_var[ident] = dt.epoch
        response = name + out[0]

    await ctx.send(response)


@bot.command(name='—Å—Ç–æ–ø')
async def stop_counter(ctx):
    dte = Delorean()
    name = ctx.author.name
    if ctx.guild:
        guild = str(ctx.guild.id)
    else:
        guild = 'noguild'
    ident = str(name + '@' + guild)

    if ident in time_var:
        dts = time_var.pop(ident)
        r = dte.epoch - dts
        rr = epoch(r)
        response = name + ', —Ç–≤–æ—ë –≤—Ä–µ–º—è: ' + rr.datetime.strftime("%H:%M:%S") + ' üèÅ'
    else:
        response = '–°—Ç–∞—Ä—Ç–∞ –Ω–µ –±—ã–ª–æ üòí'

    await ctx.send(response)


@bot.command(name='—Ç–∞–π–º–µ—Ä')
async def timer_handler(ctx, funx: str = '', val: int = 5, dfn: str = '–º–∏–Ω'):
    name = ctx.author.name
    if ctx.guild:
        guild = str(ctx.guild.id)
    else:
        guild = 'noguild'
    ident = str(name + '@' + guild)

    async def timer_start():
        dfn_transpose = {
            '–º–∏–Ω': 60,
            '—Å–µ–∫': 1,
            '—á–∞—Å': 3600
        }

        if val and dfn:
            value = val * dfn_transpose[dfn]
        else:
            value = 0

        if 0 < value <= 7200:
            if ident not in timer_run:
                dt = Delorean()
                response = '‚è≥ —Ç–∞–π–º–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ ' + str(val) + ' ' + dfn + '. (' + str(value) + ' —Å–µ–∫—É–Ω–¥)'
                await ctx.send(response)
                msg = await ctx.send('–û—Å—Ç–∞–ª–æ—Å—å ...')
                value = dt.epoch + value
                bot.loop.create_task(timer_routine(ctx, value, msg, ident))
                timer_run[ident] = True
                # https://stackoverflow.com/questions/45824314/break-loop-with-command
            else:
                await ctx.send(content='‚è≥ —Ç–∞–π–º–µ—Ä —É–∂–µ –∑–∞–ø—É—â–µ–Ω')
        else:
            await ctx.send(content='ü§î –∫–∞–∂–µ—Ç—Å—è, —É–∫–∞–∑–∞–Ω–æ –Ω–µ–≤–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è!')

    async def timer_stop():
        if ident in timer_run:
            timer_run[ident] = False
        else:
            await ctx.send(content='–ù–µ—á–µ–≥–æ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å ü§∑‚Äç‚ôÄÔ∏è')

    async def do_default():
        response = '—Ç–∞–π–º–µ—Ä `—Å—Ç–∞—Ä—Ç <—á–∏—Å–ª–æ> <—Å–µ–∫|–º–∏–Ω|—á–∞—Å>`'
        await ctx.send(response)

    action = {
        '': do_default,
        '—Å—Ç–∞—Ä—Ç': timer_start,
        '—Å—Ç–æ–ø': timer_stop
    }

    return await action[funx]()


@bot.command(name='–≥–æ–ª–æ—Å')
async def join(ctx):
    guild = str(ctx.guild.id)
    global voice

    if ctx.author.voice and ctx.author.voice.channel:
        channel = ctx.author.voice.channel
    else:
        return await ctx.send("–°–Ω–∞—á–∞–ª–∞ –≤–∞–º –Ω—É–∂–Ω–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –≥–æ–ª–æ—Å–æ–≤–æ–º—É –∫–∞–Ω–∞–ª—É!")
    #
    if ctx.voice_client is not None:
        await voice[guild].move_to(channel)
        await ctx.send('–ü–µ—Ä–µ–º–µ—Å—Ç–∏–ª—Å—è –Ω–∞ –∫–∞–Ω–∞–ª {}'.format(channel))
    else:
        voice[guild] = await channel.connect()
        await ctx.send('–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è—é—Å—å –∫ –∫–∞–Ω–∞–ª—É {}'.format(channel))


@bot.command(name='—Ü—ã—Ü')
async def voice_leave(ctx):
    guild = str(ctx.guild.id)
    if voice[guild].is_connected():
        await voice[guild].disconnect()


async def add_to_queue(ctx, play_type, data):
    global jsondata
    init_loop = False
    # {server:id {user:name; type(youtube, file, text); data} }into json file
    guild = str(ctx.guild.id)

    if guild not in jsondata:
        jsondata[guild] = {}

    if 'queue' in jsondata[guild]:
        voice_queue = jsondata[guild]['queue']
    else:
        voice_queue = []

    if len(voice_queue) == 0:
        init_loop = True

    title = await YTDLSource.get_title(data, loop=bot.loop)

    voice_queue.append({
        'user': ctx.author.name,
        'type': play_type,
        'source': data,
        'title': title
    })

    jsondata[guild]['queue'] = voice_queue
    # print(jsondata)

    modify_json_data()

    if init_loop is True:
        bot.loop.create_task(queue_routine(ctx))
    # upload_json_data()


async def queue_routine(ctx):
    await bot.wait_until_ready()
    guild = str(ctx.guild.id)
    global jsondata

    def move_queue():
        if jsondata[guild]['queue']:
            del jsondata[guild]['queue'][0]

    while not bot.is_closed() and jsondata[guild].get('queue'):
        if ctx.voice_client.is_playing() is False and ctx.voice_client.is_paused() is False:
            source = jsondata[guild]['queue'][0]['source']

            if jsondata[guild]['queue'][0]['type'] == 'yt':
                player = await YTDLSource.from_url(source, loop=bot.loop)
                ctx.voice_client.pause()
                async with ctx.typing():
                    ctx.voice_client.play(player, after=lambda e: print('Player \
error: %s' % e) if e else move_queue())
                await ctx.send('–ò–≥—Ä–∞—é –∞—É–¥–∏–æ —Å YouTube: {}'.format(player.title))

            elif jsondata[guild]['queue'][0]['type'] == 'stream':
                player = await YTDLSource.from_url(source, loop=bot.loop, stream=True)
                ctx.voice_client.pause()
                async with ctx.typing():
                    ctx.voice_client.play(player, after=lambda e: print('Player \
error: %s' % e) if e else move_queue())
                await ctx.send('–í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–∂—É —Å—Ç—Ä–∏–º —Å YouTube: {}'.format(player.title))

            if len(jsondata[guild]['queue']) == 1:
                await ctx.send('–≠—Ç–æ –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ç—Ä–µ–∫ –≤ –æ—á–µ—Ä–µ–¥–∏. –ú–æ–∂–µ—Ç, –¥–æ–±–∞–≤–∏–º –µ—â—ë –ø–∞—Ä—É? üòâ')
            modify_json_data()
        await asyncio.sleep(1)

    if not ctx.voice_client.is_playing() or ctx.voice_client.is_playing() is False and ctx.voice_client.is_paused() is False:
        await ctx.send('–í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –æ–∫–æ–Ω—á–µ–Ω–æ')


@bot.command(name='–ø–ª–µ–µ—Ä')
async def voice_play(ctx, cmd: str = '', *, source: str = ''):
    global jsondata
    if cmd == '—é—Ç—É–±' or cmd == '—Å—Ç—Ä–∏–º' or cmd == '—Ñ–∞–π–ª':
        if ctx.author.voice and ctx.author.voice.channel:
            if ctx.voice_client is None:
                return await ctx.send('–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç–µ –º–µ–Ω—è –∫ –≥–æ–ª–æ—Å–æ–≤–æ–º—É –∫–∞–Ω–∞–ª—É –∫–æ–º–∞–Ω–¥–æ–π `!–≥–æ–ª–æ—Å`')
            if cmd == '—é—Ç—É–±' and source != '':
                await add_to_queue(ctx, 'yt', source)
                await ctx.send('–í–∏–¥–µ–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ')
            elif cmd == '—Å—Ç—Ä–∏–º' and source != '':
                await add_to_queue(ctx, 'stream', source)
                await ctx.send('–ü–æ—Ç–æ–∫–æ–≤–æ–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ')
                '''    
            elif cmd == '—Ñ–∞–π–ª':
                fn = None
                if ctx.message.attachments:
                    fn = ctx.message.attachments[0].filename[-4::]
                if fn and (fn == '.mp3' or fn == '.mp4'):
                    guild = str(ctx.guild.id)
                    await ctx.message.attachments[0].save(str(guild) + fn)
                    source = discord.PCMVolumeTransformer(discord.FFmpegPCMAudio(str(guild) + fn))
                    ctx.voice_client.stop()
                    ctx.voice_client.play(source, after=lambda e: print('Player error: %s' % e) if e else None)
                    await ctx.send('–ò–≥—Ä–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π —Ñ–∞–π–ª')
                else:
                    await ctx.send('–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ .mp3 –∏–ª–∏ mp4')
                 '''
            else:
                await ctx.send('–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–º–∞–Ω–¥—É')
        else:
            await ctx.send('–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç–µ—Å—å –∫ –≥–æ–ª–æ—Å–æ–≤–æ–º—É –∫–∞–Ω–∞–ª—É')

    elif cmd == '—Å—Ç–æ–ø':
        jsondata[str(ctx.guild.id)]['queue'] = []
        modify_json_data()
        ctx.voice_client.stop()
    elif cmd == '–ø–∞—É–∑–∞':
        ctx.voice_client.pause()
        await ctx.send('–í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ')
    elif cmd == '–≤–ø–µ—Ä–µ–¥' or cmd == '–≤–ø–µ—Ä—ë–¥' or cmd == '—Å–ª–µ–¥':
        ctx.voice_client.stop()
        # bot.loop.create_task(queue_routine(ctx))
    elif cmd == '–ø—Ä–æ–¥':
        ctx.voice_client.resume()
        await ctx.send('–í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–æ')
    elif cmd == '–≥—Ä–æ–º–∫–æ—Å—Ç—å':
        if source != '':
            volume = int(source)
            ctx.voice_client.source.volume = float(volume / 100)
            await ctx.send("Changed volume to {}%".format(volume))
    elif cmd == '–æ—á–µ—Ä–µ–¥—å':
        out_str = ''
        if len(jsondata[str(ctx.guild.id)]['queue']) != 0:
            i = 0
            for k in jsondata[str(ctx.guild.id)]['queue']:
                out_str += (str(i+1) + ': ' + k['title'] + ' | –î–æ–±–∞–≤–∏–ª @'+k['user'] + '\n')
                i += 1
        else:
            out_str = '–û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞'
        await ctx.send(out_str)
    else:
        await ctx.send('–ù–µ—Ç —Ç–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã')


@bot.command(name='–æ–ª–µ–Ω—å')
async def deer(ctx):
    return await custom_help(ctx, '')


@bot.command(name='–ø–∏–Ω–≥')
async def ping(ctx):
    await ctx.send('üèì –ü–æ–Ω–≥! {0} –º—Å'.format(round(bot.latency*1000)))


@bot.command(name='—Ç–µ–∫—Å—Ç')
async def porf_request(ctx, *, init: str):
    if not init:
        return await ctx.send('–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞–ø—Ä–æ—Å–∞ –≤ –∫–∞–≤—ã—á–∫–∞—Ö')

    url = 'https://models.dobro.ai/gpt2/medium/'
    request = {
        'prompt': init,
        'length': 60,
        'num_samples': 1
    }
    async with ctx.typing():
        response = requests.post(url, json=request)
        data = response.json()
    await ctx.send(init + str(data['replies'][0]))


# dream --- make post request with url to another machine
@bot.command(name='–¥—Ä–∏–º')
async def dream(ctx, url: str = None):
    if url is not None:
        img = url
    elif ctx.message.attachments:
        img = ctx.message.attachments[0].url
    else:
        return await ctx.send('–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –≤–º–µ—Å—Ç–µ —Å –∫–æ–º–∞–Ω–¥–æ–π')

    async with ctx.typing():
        r = requests.post(
            "https://api.deepai.org/api/deepdream",
            data={
                'image': img,
            },
            headers={'api-key': '8c01fe27-dd5d-40d4-8a09-958e71ae438c'}
        )
        data = r.json()

    if 'output_url' in data:
        await ctx.send('–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ:\n ' + data['output_url'])
    else:
        await ctx.send('–û—à–∏–±–∫–∞:\n ' + data['status'])


@bot.command(name='–∏–≥—Ä–∞')
async def game(ctx, cmd: str = None):
    global jsondata
    name = ctx.author.name
    if ctx.guild:
        guild = str(ctx.guild.id)
    else:
        guild = 'noguild'
    ident = str(name + '@' + guild)

    initial_values = {
        'money': 10,
        'hp': 100,
        'xp': 1
    }

    if cmd is None:
        '''
            –ò–¥–µ–∏: –∞—á–∏–≤–∫–∏, –ø—Ä–æ–∑–≤–∏—â–∞, —Ä–∞–Ω–¥–æ–º –æ—Ä—É–∂–∏–µ –∏ —à–º–æ—Ç, —Å—Ç–∞—Ç—ã, –±–∞—Ñ—Ñ—ã, –ø—Ä–æ–≥—Ä–µ—Å—Å–±–∞—Ä, –∫–≤–µ—Å—Ç—ã, —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –æ–ø—ã—Ç –≤ –≥–æ–ª–æ—Å–µ
        '''
        return await ctx.send('–ò–≥—Ä–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ')
    if cmd == '—Å—Ç–∞—Ä—Ç':
        if 'users' not in jsondata:
            jsondata['users'] = {}
        if ident in jsondata['users']:
            return await ctx.send('–í—ã —É–∂–µ –≤ –∏–≥—Ä–µ! üêâ')
        jsondata['users'][ident] = initial_values
        modify_json_data()
        upload_json_data()
        return await ctx.send('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∏–≥—Ä—É! üßô‚Äç‚ôÇÔ∏è')


async def voice_synthesis(text: str, filename):
    with open(filename, "wb") as f:
        # omazh, filipp
        for audio_content in synthesize(text=text, voice='filipp', emotion='neutral'):
            f.write(audio_content)
    return discord.PCMVolumeTransformer(discord.FFmpegPCMAudio(filename))


# @bot.command(name='create-channel')
# @commands.has_role('admin')


@bot.command(name='–Ω–æ–≤–æ—Å—Ç–∏')
async def read_news(ctx, *, index: str = '–≥–ª–∞–≤–Ω–æ–µ'):
    if ctx.voice_client is None:
        return await ctx.send('–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç–µ –º–µ–Ω—è –∫ –≥–æ–ª–æ—Å–æ–≤–æ–º—É –∫–∞–Ω–∞–ª—É')
    feed = feedparser.parse("https://news.yandex.ru/index.rss")  # –≥–ª–∞–≤–Ω–æ–µ

    if index == '' or index == '–≥–ª–∞–≤–Ω–æ–µ':
        feed = feedparser.parse("https://news.yandex.ru/index.rss")  # –≥–ª–∞–≤–Ω–æ–µ
    elif index == '–ú–æ—Å–∫–≤–∞' or index == '–º–æ—Å–∫–≤–∞':
        feed = feedparser.parse("https://news.yandex.ru/Moscow/index.rss")  # –ü–æ—Å–∫–≤–∞
    elif index == '–ü—Å–∫–æ–≤' or index == '–ø—Å–∫–æ–≤':
        feed = feedparser.parse("https://news.yandex.ru/Pskov/index.rss")  # –ü—Å–∫–æ–≤
    elif index == '–º–∏—Ä' or index == '–≤ –º–∏—Ä–µ':
        feed = feedparser.parse("https://news.yandex.ru/world.rss")  # –≤ –º–∏—Ä–µ

    full_text = ''
    next_n = [
        '–ü–µ—Ä–µ–π–¥—ë–º –∫ —Å–ª–µ–¥—É—é—â–µ–π –Ω–æ–≤–æ—Å—Ç–∏. - ',
        '–î–∞–ª–µ–µ. - ',
        '–°–ª–µ–¥—É—é—â–∞—è –Ω–æ–≤–æ—Å—Ç—å. - ',
        '–î–∞–ª–µ–µ –ø–æ —Å–ø–∏—Å–∫—É. - ',
        '–ö –¥—Ä—É–≥–∏–º –Ω–æ–≤–æ—Å—Ç—è–º. - '
    ]
    i = 0
    for entry in feed.entries[0:10]:
        summary = html.unescape(entry.summary)
        # f'–ù–æ–≤–æ—Å—Ç—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞ {str(entry.published)}.'
        if i < 9:
            full_text += f'{summary} {random.choice(next_n)} '
        else:
            full_text += f'{summary} –ü–æ–∫–∞ —ç—Ç–æ –≤—Å–µ –Ω–æ–≤–æ—Å—Ç–∏ –∏–∑ –¥–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏. '
        i += 1
    cat = f'–û–∑–≤—É—á–∏–≤–∞—é –Ω–æ–≤–æ—Å—Ç–∏ –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "{index}".\n'
    await say_it(ctx, text=cat + full_text)
    await ctx.send(cat)


async def say_it(ctx, *, text):
    if text is None:
        return
    if ctx.voice_client is None:
        return
    dt = Delorean()
    filename = f'{dt.epoch}_{str(ctx.guild.id)}.opus'
    source = await voice_synthesis(text, filename)

    if ctx.voice_client.is_playing() and not ctx.voice_client.is_paused():
        while not bot.is_closed() and (ctx.voice_client.is_playing() or ctx.voice_client.is_paused()):
            await asyncio.sleep(1)
        ctx.voice_client.pause()
        ctx.voice_client.play(source, after=lambda e: print('Player error: %s' % e) if e else None)
    else:
        ctx.voice_client.pause()
        ctx.voice_client.play(source, after=lambda e: print('Player error: %s' % e) if e else None)


@bot.event
async def on_command_error(ctx, error):
    if isinstance(error, commands.errors.CheckFailure):
        await ctx.send('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–æ–ª–Ω–æ–º–æ—á–∏–π.')

bot.run(TOKEN)
