#bot.py
# -*- coding: utf-8 -*-

import os
import random
import asyncio
import discord
import wget

from dotenv import load_dotenv
from discord.ext import commands
from delorean import Delorean
from delorean import epoch

load_dotenv()
TOKEN = os.environ.get('DISCORD_TOKEN')
STATUS = 'ü¶å | !–∫–∞–∫'

bot = commands.Bot(command_prefix='!')
bot.remove_command('help')

time_var = {}
timer_run = {}

async def custom_help(ctx, command=''):
    embed = discord.Embed(
        colour=discord.Colour.green()
    )

    coms = {
        '–∫–∞–∫': [' ü¶å –í—ã–≤–æ–¥–∏—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –∏–ª–∏ –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–∞–Ω–¥–µ', '–í—ã–≤–æ–¥–∏—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –∏–ª–∏ \
        –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–∞–Ω–¥–µ'],
        '–∫–∏–Ω—å': [' üé≤ –ö–∏–¥–∞–µ—Ç –∫—É–±–∏–∫–∏', '–ö–∏–Ω—É—Ç—å –∫—É–±–∏–∫–∏ *x* —Å—Ç–æ—Ä–æ–Ω *y* —Ä–∞–∑'],
        '–ø–µ—Ä–µ–≤–µ–¥–∏': [' üîÑ –ü–µ—Ä–µ–≤–æ–¥ —Ä–∞—Å–∫–ª–∞–¥–∫–∏ —Ç–µ–∫—Å—Ç–∞', '–ü–µ—Ä–µ–≤–æ–¥–∏—Ç —Ç–µ–∫—Å—Ç –≤ –Ω—É–∂–Ω—É—é —Ä–∞—Å–∫–ª–∞–¥–∫—É'],
        '—Å—Ç–∞—Ä—Ç': [' ‚è≤ –ó–∞–ø—É—Å–∫–∞–µ—Ç —Å–µ–∫—É–Ω–¥–æ–º–µ—Ä', '–ó–∞–ø—É—Å–∫–∞–µ—Ç —Å–µ–∫—É–Ω–¥–æ–º–µ—Ä'],
        '—Å—Ç–æ–ø': [' ‚è≤ –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–µ–∫—É–Ω–¥–æ–º–µ—Ä –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç', '–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–µ–∫—É–Ω–¥–æ–º–µ—Ä –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç'],
        '—Ç–∞–π–º–µ—Ä': [' ‚è≥ –ó–∞–ø—É—Å–∫–∞–µ—Ç —Ç–∞–π–º–µ—Ä', '—Ç–∞–π–º–µ—Ä `—Å—Ç–∞—Ä—Ç <—á–∏—Å–ª–æ> <—Å–µ–∫|–º–∏–Ω|—á–∞—Å>`, `—Å—Ç–æ–ø`'],
        '–ø–∏–Ω–≥': ['üèì –ó–∞–¥–µ—Ä–∂–∫–∞ –±–æ—Ç–∞', '–í—Ä–µ–º—è –∑–∞–¥–µ—Ä–∂–∫–∏ –æ—Ç–≤–µ—Ç–∞ –±–æ—Ç–∞ –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö']
    }

    if command == '':
        embed.set_author(name='–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ üõ†')
        for key in coms:
            value = coms[key]
            embed.add_field(name='!'+key, value=value[0], inline=False)
        embed.add_field(name='---', value='–ö—Å—Ç–∞—Ç–∏, –±–æ—Ç—É –º–æ–∂–Ω–æ –ø–∏—Å–∞—Ç—å –∏ –Ω–∞–ø—Ä—è–º—É—é üòé', inline=False)
    else:
        embed.set_author(name='–ü–æ–∏—Å–∫ –ø–æ –∫–æ–º–∞–Ω–¥–µ üîé')
        if command in coms:
            embed.add_field(name='!' + command, value=coms[command][1], inline=False)
        else:
            embed.add_field(name='!' + command, value='–ù–µ—Ç —Ç–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã ü§∑‚Äç‚ôÇÔ∏è', inline=False)

    await ctx.send('', embed=embed)


async def translate(ctx, sub_: str):
    symbols_en = "qwertyuiop[]asdfghjkl;'zxcvbnm,./`"\
                 'QWERTYUIOP{}ASDFGHJKL:"ZXCVBNM<>?~&'

    symbols_ru = "–π—Ü—É–∫–µ–Ω–≥—à—â–∑—Ö—ä—Ñ—ã–≤–∞–ø—Ä–æ–ª–¥–∂—ç—è—á—Å–º–∏—Ç—å–±—é.—ë"\
                 '–ô–¶–£–ö–ï–ù–ì–®–©–ó–•–™–§–´–í–ê–ü–†–û–õ–î–ñ–≠–Ø–ß–°–ú–ò–¢–¨–ë–Æ,–Å?'
    en = 0
    ru = 0

    if sub_:
        for k in range(len(sub_)):
            if sub_[k] in symbols_en:
                en += 1
            if sub_[k] in symbols_ru:
                ru += 1

        if en > ru:
            layout = dict(zip(map(ord, symbols_en), symbols_ru))
        else:
            layout = dict(zip(map(ord, symbols_ru), symbols_en))

        await ctx.send('<@' + str(ctx.message.author.id) + '>' + ', –ø–µ—Ä–µ–≤–æ–∂—É: \n```' + sub_ + ' -> ' + sub_.translate(layout) + '```')
    else:
        await ctx.send('–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–≤–æ–¥–∏—Ç —Ç–µ–∫—Å—Ç –≤ —Ä—É—Å—Å–∫—É—é —Ä–∞—Å–∫–ª–∞–¥–∫—É. –¢–µ–∫—Å—Ç –≤–≤–æ–¥–∏—Ç—Å—è –≤ –∫–∞–≤—ã—á–∫–∞—Ö')


@bot.event
async def on_ready():
    await bot.change_presence(activity=discord.Game(name=STATUS))
    print(bot.user.name + ' is ready.')


@bot.command(name='–∫–∞–∫')
async def run_help(ctx, command=''):
    await custom_help(ctx, command)


@bot.command(name='–ø–µ—Ä–µ–≤–µ–¥–∏')
async def run_translate(ctx, sub_: str = ''):
    await translate(ctx, sub_)


@bot.command(name='–∫–∏–Ω—å')
async def roll(ctx, number_of_sides: int = 20, number_of_dice: int = 1):
    if 1 < number_of_sides <= 100 and 0 < number_of_dice <= 50:
        dice = [
            '**' + str(random.choice(range(1, number_of_sides + 1))) + '**'
            for _ in range(number_of_dice)
        ]
        name = ctx.message.author.name
        await ctx.send(name + ' –∫–∏–¥–∞–µ—Ç –∫—É–±–∏–∫–∏ ({0}x{1}) üé≤üé≤ \n–í—ã–ø–∞–ª–æ:\
         \n'.format(number_of_dice, number_of_sides) + ', '.join(dice))
    else:
        await ctx.send('–ù–µ –∫–∏–Ω—É üòï')


@bot.command(name='—Å—Ç–∞—Ä—Ç')
async def start_counter(ctx):
    dt = Delorean()
    name = ctx.author.name
    if ctx.guild:
        guild = str(ctx.guild.id)
    else:
        guild = 'noguild'

    ident = str(name+'@'+guild)

    out = [', –ø–æ–µ—Ö–∞–ª–∏! üí®', ', —á–∞—Å–∏–∫–∏ —É–∂–µ —Ç–∏–∫–∞—é—Ç! ‚è≤']

    if ident in time_var:
        response = name + out[1]
    else:
        time_var[ident] = dt.epoch
        response = name + out[0]

    await ctx.send(response)


@bot.command(name='—Å—Ç–æ–ø')
async def stop_counter(ctx):
    dte = Delorean()
    name = ctx.author.name
    if ctx.guild:
        guild = str(ctx.guild.id)
    else:
        guild = 'noguild'
    ident = str(name + '@' + guild)

    if ident in time_var:
        dts = time_var.pop(ident)
        r = dte.epoch - dts
        rr = epoch(r)
        response = name + ', —Ç–≤–æ—ë –≤—Ä–µ–º—è: ' + rr.datetime.strftime("%H:%M:%S") + ' üèÅ'
    else:
        response = '–°—Ç–∞—Ä—Ç–∞ –Ω–µ –±—ã–ª–æ üòí'

    await ctx.send(response)


@bot.command(name='—Ç–∞–π–º–µ—Ä')
async def timer_handler(ctx, funx: str = '', val: int = 5, dfn: str = '–º–∏–Ω'):
    name = ctx.author.name
    if ctx.guild:
        guild = str(ctx.guild.id)
    else:
        guild = 'noguild'
    ident = str(name + '@' + guild)

    async def timer_start():
        dfn_transpose = {
            '–º–∏–Ω': 60,
            '—Å–µ–∫': 1,
            '—á–∞—Å': 3600
        }

        if val and dfn:
            value = val * dfn_transpose[dfn]
        else:
            value = 0

        if 0 < value <= 7200:
            if ident not in timer_run:
                response = '‚è≥ —Ç–∞–π–º–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ ' + str(val) + ' ' + dfn + '. (' + str(value) + ' —Å–µ–∫—É–Ω–¥)'
                await ctx.send(response)
                msg = await ctx.send('–û—Å—Ç–∞–ª–æ—Å—å ...')
                bot.loop.create_task(timer_routine(ctx, value, msg, ident))
                timer_run[ident] = True
                # https://stackoverflow.com/questions/45824314/break-loop-with-command
            else:
                await ctx.send(content='‚è≥ —Ç–∞–π–º–µ—Ä —É–∂–µ –∑–∞–ø—É—â–µ–Ω')
        else:
            await ctx.send(content='ü§î –∫–∞–∂–µ—Ç—Å—è, —É–∫–∞–∑–∞–Ω–æ –Ω–µ–≤–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è!')

    async def timer_stop():
        if ident in timer_run:
            timer_run[ident] = False
        else:
            await ctx.send(content='–ù–µ—á–µ–≥–æ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å ü§∑‚Äç‚ôÄÔ∏è')

    async def do_default():
        response = '—Ç–∞–π–º–µ—Ä `—Å—Ç–∞—Ä—Ç <—á–∏—Å–ª–æ> <—Å–µ–∫|–º–∏–Ω|—á–∞—Å>`'
        await ctx.send(response)

    action = {
        '': do_default,
        '—Å—Ç–∞—Ä—Ç': timer_start,
        '—Å—Ç–æ–ø': timer_stop
    }

    return await action[funx]()


async def timer_routine(ctx, timer_var, message, idd):
    await bot.wait_until_ready()

    while not bot.is_closed() and not (timer_run[idd] is False or timer_var <= 0):
        timer_var -= 1
        await message.edit(content='–û—Å—Ç–∞–ª–æ—Å—å ' + str(timer_var))
        await asyncio.sleep(1)

    timer_run.pop(idd)
    await message.delete()
    await ctx.send('<@'+str(ctx.author.id)+'>' + ', —Ç–∞–π–º–µ—Ä –∑–∞–≤–µ—Ä—à–∏–ª –æ—Ç—Å—á–µ—Ç!')


@bot.command(name='–æ–ª–µ–Ω—å')
async def deer(ctx):
    return await custom_help(ctx, '')


@bot.command(name='–ø–∏–Ω–≥')
async def ping(ctx):
    await ctx.send('üèì –ü–æ–Ω–≥! {0} –º—Å'.format(round(bot.latency*1000)))

# @bot.command(name='create-channel')
# @commands.has_role('admin')


# @bot.loop()
# async def my_background_task(self):


@bot.event
async def on_command_error(ctx, error):
    if isinstance(error, commands.errors.CheckFailure):
        await ctx.send('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–æ–ª–Ω–æ–º–æ—á–∏–π.')

bot.run(TOKEN)
